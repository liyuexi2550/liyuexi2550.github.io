<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【晴问算法】入门篇—贪心算法—经典例题和个人题解</title>
    <url>/2023/03/04/%E3%80%90%E6%99%B4%E9%97%AE%E7%AE%97%E6%B3%95%E3%80%91%E5%85%A5%E9%97%A8%E7%AF%87%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E2%80%94%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98%E5%92%8C%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>OJ平台链接</strong>：<a href="https://sunnywhy.com/sfbj/4/4/149">https://sunnywhy.com/sfbj/4/4/149</a></p>
<h2 id="什么是贪心算法？"><a href="#什么是贪心算法？" class="headerlink" title="什么是贪心算法？"></a>什么是贪心算法？</h2><p><strong>定义</strong>：<strong>采用局部最优的策略能得到全局最优的结果。</strong><br>然而，并不是所有问题都适用贪心算法，完全适用贪心算法的问题必须具有<strong>最优子结构</strong>。针对不完全适用的问题，利用贪心算法，往往只能得到较优解，而并非是最优解。<br>通俗地讲，假如贪心算法适用于统一天下的问题，那么，刘皇叔完全不用考虑天下大势，每次只要让当前战役所取得的利益最大，损失最小，他就能统一天下。<br>最优子结构意味着只要局部利益最大化就一定能达到全局利益最大化，追求当前局部利益最大化不会损失往后的局部利益，不存在着为了长远利益，而主动牺牲当前的利益这样的现象，只需考虑眼前的利益最大化就可以了，就一定能够达成全局利益最大化的结果。</p>
<hr/>

<h1 id="1-最优装箱"><a href="#1-最优装箱" class="headerlink" title="1. 最优装箱"></a>1. 最优装箱</h1><p><strong>题目描述</strong><br>有$n$个箱子需要装上一艘轮船，已知第$i$个箱子的重量为$w_i$，轮船的载重为$W$。问在不超过轮船载重的前提下，最多能把多少个箱子装上轮船。</p>
<p><strong>输入描述</strong><br>第一行两个正整数$n$、$W$（$1{\le}n{\le}10^5$、$1{\le}W{\le}10^7$），分别表示箱子个数和轮船载重。</p>
<p>第二行$n$个正整数$w_i$（$1{\le}w_i{\le}10^7$），表示$n$个箱子的重量。</p>
<p><strong>输出描述</strong><br>输出两个整数，分别表示能装上轮船的箱子个数和总重量，用空格隔开。</p>
<p><strong>样例1</strong><br><strong>输入</strong><br>5 11<br>7 2 9 1 11<br><strong>输出</strong><br>3 10<br><strong>解释</strong><br>能将重量分别为7、2、1的箱子装上轮船（此时箱子个数最多），总重量为10。</p>
<h2 id="下面是对这道题的解答："><a href="#下面是对这道题的解答：" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 对箱子按照重量从小到大排序，每次拿箱子都拿重量最小的那个箱子，直到不能拿为止（不允许总重量超过轮船载重）。</p>
<p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>]; <span class="comment">//表示每个箱子的重量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,n,W;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">//sum表示当前已拿箱子的总重量</span></span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//cnt表示当前已拿箱子的数量</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;W); <span class="comment">//n表示箱子个数，W表示轮船最大载重</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">//读入每个箱子的重量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a,a+n); <span class="comment">//按箱子的重量从小到大排序，贪心策略是优先选择重量小的箱子</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum+a[i]&gt;W) <span class="keyword">break</span>; <span class="comment">//如果拿了当前的箱子会导致超重的话，就不再继续拿箱子</span></span><br><span class="line">		<span class="keyword">else</span>&#123;<span class="comment">//如果不会超重，那么拿当前的箱子</span></span><br><span class="line">			cnt++; <span class="comment">//已拿箱子个数加1</span></span><br><span class="line">			sum+=a[i];<span class="comment">//已拿箱子的总重量加上新拿箱子的重量</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,cnt,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr/>


<h1 id="2-整数配对"><a href="#2-整数配对" class="headerlink" title="2. 整数配对"></a>2. 整数配对</h1><p><strong>题目描述</strong><br>有两个正整数集合$S$、$T$，其中$S$中有$n$个正整数，$T$中有$m$个正整数。定义一次配对操作为：从两个集合中各取出一个数$a$和$b$，满足$a \in S$、$b \in T$、$a \le b$，配对的数不能再放回集合。问最多可以进行多少次这样的配对操作。</p>
<p><strong>输入描述</strong><br>第一行两个正整数$n$、$m$（$1{\le}n{\le}10^4$、$1{\le}m{\le}10^4$），分别表示$S$和$T$中正整数的个数。</p>
<p>第二行$n$个正整数（$1{\le}a_i{\le}10^5$），表示$S$中的$n$个正整数。</p>
<p>第三行$m$个正整数（$1{\le}b_i{\le}10^5$），表示$T$中的$m$个正整数。</p>
<p><strong>输出描述</strong><br>输出一个整数，表示最多的配对操作次数。</p>
<p><strong>样例1</strong><br><strong>输入</strong><br>3 3<br>2 5 3<br>3 3 4<br><strong>输出</strong><br>2<br><strong>解释</strong><br>2与其中一个3配对，3与另一个3配对，5无法和4配对。因此最多配对两次。</p>
<h2 id="下面是对这道题的解答：-1"><a href="#下面是对这道题的解答：-1" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 对集合S和集合T均从小到大排序，针对集合S中的每一个元素，选择集合T中尽可能小的但是又比集合S中的当前元素大的元素，保证配对总数最大，避免非常小的元素配对非常大的元素，导致其它元素配不到对。</p>
<p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m,tp,i,j;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//表示当前已配对数</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1,v2; <span class="comment">//向量v1存储集合S的元素，向量v2存储集合T的元素</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tp); <span class="comment">//读入集合S的元素，允许重复</span></span><br><span class="line">		v1.<span class="built_in">push_back</span>(tp); <span class="comment">//将元素放入集合S</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>()); <span class="comment">//对集合S的元素从小到大排序</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tp); <span class="comment">//读入集合T的元素，允许重复</span></span><br><span class="line">		v2.<span class="built_in">push_back</span>(tp); <span class="comment">//将元素放入集合T</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>()); <span class="comment">//对集合T的元素从小到大排序</span></span><br><span class="line">	j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v1[i]&lt;=v2[j])&#123; <span class="comment">//如果集合S当前元素小于等于集合T当前元素，可以配对</span></span><br><span class="line">			sum++; <span class="comment">//配对数加1</span></span><br><span class="line">			i++; <span class="comment">//配对成功，开始对集合S的下一个元素寻找配对元素</span></span><br><span class="line">		&#125;</span><br><span class="line">		j++; <span class="comment">//考虑集合T的下一个元素</span></span><br><span class="line">		<span class="keyword">if</span>(j==m) <span class="keyword">break</span>; <span class="comment">//如果已经到达集合T的最后一个元素，意味着集合T不再有可以配对的元素</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr/>

<h1 id="3-最大组合整数"><a href="#3-最大组合整数" class="headerlink" title="3. 最大组合整数"></a>3. 最大组合整数</h1><p><strong>题目描述</strong><br>现有0~9中各个数的个数，将它们组合成一个整数，求能组合出的最大整数。</p>
<p><strong>输入描述</strong><br>在一行中依次给出0-9中各个数的个数（所有个数均在0-100之间）。数据保证至少有一个数的个数大于0。</p>
<p><strong>输出描述</strong><br>输出一个整数，表示能组合出的最大整数。</p>
<p><strong>样例1</strong><br><strong>输入</strong><br>1 0 2 0 0 0 0 0 0 1<br><strong>输出</strong><br>9220<br><strong>解释</strong><br>存在1个0、2个2、1个9，因此能组合出的最大整数是9220</p>
<h2 id="下面是对这道题的解答：-2"><a href="#下面是对这道题的解答：-2" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 要想使得输出整数最大，只要让每次输出的数都是当前可用的最大数，例如，先输出9，再输出8，再7，以此类推，最后输出0，始终让当前可用的最大的数字位于整数的高位，这能保证整数最大。如果某个数字有多个可用，那就输出多个，如果某个数字只有0个可用，那就不用，将其跳过。</p>
<p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>]; <span class="comment">//存储0-9当中每个数的出现次数</span></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> flag = <span class="literal">false</span>; <span class="comment">//是否是第一个输出的数字</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123;  <span class="comment">//从大到小输出数字，最先输出9，最后输出0，这能保证组合而成的整数最大</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!flag&amp;&amp;i==<span class="number">0</span>)&#123; <span class="comment">//如果第一个输出的数字是0，意味着只有0可以用</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="comment">//只输出一个0</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(a[i]!=<span class="number">0</span>)&#123; <span class="comment">//将当前数字的次数全部用完</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i); <span class="comment">//输出当前数字</span></span><br><span class="line">				a[i]--; <span class="comment">//可用个数减一</span></span><br><span class="line">			&#125;</span><br><span class="line">			flag = <span class="literal">true</span>; <span class="comment">//表示已经输出了第一个数字</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr/>

<h1 id="4-区间不相交问题"><a href="#4-区间不相交问题" class="headerlink" title="4. 区间不相交问题"></a>4. 区间不相交问题</h1><p><strong>题目描述</strong><br>给定个开区间，从中选择尽可能多的开区间，使得这些开区间两两没有交集。</p>
<p><strong>输入描述</strong><br>第一行为一个正整数$n$（$1{\le}n{\le}10^4$），表示开区间的个数。</p>
<p>接下来$n$行，每行两个正整数$x_i$、$y_i$（$0{\le}x_i{\le}10^5$、$0{\le}y_i{\le}10^5$），分别表示第$i$个开区间的左端点和右端点。</p>
<p><strong>输出描述</strong><br>输出一个整数，表示最多选择的开区间个数。</p>
<p><strong>样例1</strong><br><strong>输入</strong><br>4<br>1 3<br>2 4<br>3 5<br>6 7<br><strong>输出</strong><br>3<br><strong>解释</strong><br>最多选择(1,3)、(3,5)、(6,7)三个区间，它们互相没有交集。</p>
<h2 id="下面是对这道题的解答：-3"><a href="#下面是对这道题的解答：-3" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 如果要使选取的区间没有交集，必须保证一个区间的左端点比另一个区间的右端点大，而且两两之间如此。所以，优先选取右端点小的而且左端点比上一个选取的区间的右端点大的那个区间，既保证没有交集，又保证右端点较小，为选取更多区间提供了机会。<br>实际上，在不交叉的前提下，优先选取的是区间长度短并且最靠左的区间，不容易挤占其它区间的空间，如此可选的区间会最多。<br><img src="https://img-blog.csdnimg.cn/1f1c89f64d214909a58d0c3e0f8afb09.png" alt="例图"><br>如上图所示，红色为选取的区间，蓝色为不选的区间。</p>
<p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qujian</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y; <span class="comment">//x为区间左端点，y为区间右端点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(qujian a,qujian b)</span></span>&#123; <span class="comment">//比较函数，y值小的排在y值大的前面</span></span><br><span class="line">	<span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line">qujian q[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,n;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">1</span>; <span class="comment">//当前已选择的开区间个数</span></span><br><span class="line">	<span class="type">int</span> last; <span class="comment">//上一个选取的区间的右端点值</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="comment">//n表示区间个数</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;q[i].x,&amp;q[i].y); <span class="comment">//读入每个区间的区间左端点和区间右端点</span></span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="built_in">sort</span>(q,q+n,cmp); <span class="comment">//对每个区间按照区间右端点从小到大排序，优先选右端点小的区间</span></span><br><span class="line">	last = q[<span class="number">0</span>].y; <span class="comment">//区间右端点最小的区间一定可以选取</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].x&gt;=last)&#123; <span class="comment">//如果当前区间的左端点比上一个选取的右端点还要大，则可以选取，一定没有交集</span></span><br><span class="line">			sum++;<span class="comment">//选取开区间数加1</span></span><br><span class="line">			last = q[i].y; <span class="comment">//存储该区间的右端点，以供下一个选取的区间的左端点和其比较</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr/>

<h1 id="5-区间选点问题"><a href="#5-区间选点问题" class="headerlink" title="5. 区间选点问题"></a>5. 区间选点问题</h1><p><strong>题目描述</strong><br>给定$n$个闭区间，问最少需要确定多少个点，才能使每个闭区间中都至少存在一个点。</p>
<p><strong>输入描述</strong><br>第一行为一个正整数$n$（$1{\le}n{\le}10^4$），表示闭区间的个数。</p>
<p>接下来$n$行，每行两个正整数$x_i$、$y_i$（$0{\le}x_i{\le}10^5$、$0{\le}y_i{\le}10^5$），分别表示第$i$个闭区间的左端点和右端点。</p>
<p><strong>输出描述</strong><br>输出一个整数，表示最少需要确定的点的个数。</p>
<p><strong>样例1</strong><br><strong>输入</strong><br>3<br>1 4<br>2 6<br>5 7<br><strong>输出</strong><br>2<br>解释<br>至少需要两个点（例如3和5）才能保证每个闭区间内都有至少一个点。</p>
<h2 id="下面是对这道题的解答：-4"><a href="#下面是对这道题的解答：-4" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 对每个区间按照右端点从小到大排序，尽量选取区间的右端点作为确定点，该点能和最多的区间重合。<br><img src="https://img-blog.csdnimg.cn/60b90e394e5e4c1cb4f17d2301495d87.png" alt="例图"><br>如上图所示，圆圈指的是确定点。<br><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qujian</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(qujian a,qujian b)</span></span>&#123; <span class="comment">//比较函数</span></span><br><span class="line">	<span class="keyword">if</span>(a.y!=b.y) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line">qujian q[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,i;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">1</span>; <span class="comment">//sum表示确定的点数</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;q[i].x,&amp;q[i].y);<span class="comment">//读入每个区间的左端点和右端点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(q,q+n,cmp); <span class="comment">//对区间按照右端点从小到大排序</span></span><br><span class="line">	<span class="type">int</span> last = q[<span class="number">0</span>].y; <span class="comment">//将第一个区间的右端点作为确定点</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].x&gt;last)&#123; <span class="comment">//如果当前区间的左端点比上一个区间的右端点要大，确定一个新的点，该点为当前区间的右端点</span></span><br><span class="line">			sum++; <span class="comment">//确定点数加1</span></span><br><span class="line">			last = q[i].y; <span class="comment">//修改last为新确定点的值，用于同下一个区间不叫</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr/>

<h1 id="6-拼接最小数"><a href="#6-拼接最小数" class="headerlink" title="6. 拼接最小数"></a>6. 拼接最小数</h1><p><strong>题目描述</strong><br>给定个可能含有前导0的数字串，将它们按任意顺序拼接，使生成的整数最小。</p>
<p><strong>输入描述</strong><br>第一行为一个正整数$n$（$1{\le}n{\le}10^4$），表示数字串的个数。</p>
<p>第二行给出$n$个数字串（$1{\le}$每个串的长度${\le}9$），用空格隔开。</p>
<p><strong>输出描述</strong><br>输出一个整数，表示能生成的最小整数（需要去掉前导0）。</p>
<p>样例1<br><strong>输入</strong><br>3<br>53 01 2<br><strong>输出</strong><br>1253<br><strong>解释</strong><br>按01、2、53的顺序拼接，能得到最小整数1253。</p>
<h2 id="下面是对这道题的解答：-5"><a href="#下面是对这道题的解答：-5" class="headerlink" title="下面是对这道题的解答："></a>下面是对这道题的解答：</h2><p><strong>贪心策略：</strong> 要使整数最小，只需优先选取字典序较小的字符数串作为整数的高位，字典序较大的字符数串放在低位。<br><strong>注意，排序函数cmp要写成 return a + b &lt; b + a</strong>，若如此写，假设a=120，b=12；a+b=12012，b+a=12120，那么，120会排在12的前面；如果写成return a&lt;b，这会使得120排在12的后面，为了使得形成的整数串最小，120必须作为高位，12作为低位，因为12012&lt;12120。<br><strong>注</strong>：对于cmp函数，当return true时，string a排在string b的前面；当return false时，string a排在string b后面。</p>
<p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(string a, string b)</span> </span>&#123; <span class="comment">//比较函数，字符串按字典序从小到大排序</span></span><br><span class="line">    <span class="keyword">return</span> a + b &lt; b + a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, i, j;</span><br><span class="line">	string s[<span class="number">10005</span>];</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(s, s + n,cmp); <span class="comment">//对数字串按字典序从小到大排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		str.<span class="built_in">append</span>(s[i]); <span class="comment">//将排序后的数字串按序写入，形成整数串</span></span><br><span class="line">	&#125;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (str[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp;  i&lt;str.<span class="built_in">length</span>()) i++; <span class="comment">//去除前导0</span></span><br><span class="line">	<span class="keyword">if</span> (i==str.<span class="built_in">length</span>()) &#123;<span class="comment">//如果整数串全是0，现在已经成空串了</span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;0&quot;</span>; <span class="comment">//整数为0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (j = i; j &lt; str.<span class="built_in">length</span>(); j++) &#123; <span class="comment">//输出去除前导0的整数</span></span><br><span class="line">			cout &lt;&lt; str[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心算法</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>my first post</title>
    <url>/2023/03/03/my-first-post/</url>
    <content><![CDATA[<p>This is my first post.I write the post to remember this exciting moment….</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
</search>
